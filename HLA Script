function updateHLASeenAndNewBids() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dailySheet = ss.getSheetByName("Daily Pull HLA");
  const seenSheet = ss.getSheetByName("Seen HLA");
  const newBidsSheet = ss.getSheetByName("New Bids HLA");

  dailySheet.activate();
  SpreadsheetApp.flush();

  const dailyData = dailySheet.getDataRange().getValues();
  const seenData = seenSheet.getDataRange().getValues();

  if (dailyData.length < 2) return;

  const headers = dailyData[0];
  const urlIndex = headers.indexOf("Project_Name_URL");
  const nameIndex = headers.indexOf("Project_Name");
  const bidInfoIndex = headers.indexOf("Bid_Information");

  if (nameIndex === -1 || urlIndex === -1 || bidInfoIndex === -1) {
    throw new Error("Missing required columns");
  }

  const seenProjects = new Set(seenData.slice(1).map(row => String(row[0]).toUpperCase()));

  const newRows = dailyData.slice(1).filter(row =>
    !seenProjects.has(String(row[nameIndex]).toUpperCase())
  );

  const newHeaders = headers.slice();

  // Write headers for Seen HLA
  seenSheet.getRange(1, 1, 1, 3).setValues([["Project_Name", "Date", "Time"]]);

  if (newRows.length > 0) {
    const seenFormattedRows = newRows.map(row => {
      const url = row[urlIndex];
      const name = row[nameIndex];
      const bidInfo = row[bidInfoIndex];
      const [date, time] = bidInfo.split(" - ").map(s => s.trim());
      const hyperlinkFormula = `=HYPERLINK("${url}", "${name}")`;
      return [hyperlinkFormula, date, time];
    });

    seenSheet.getRange(seenSheet.getLastRow() + 1, 1, seenFormattedRows.length, 3).setValues(seenFormattedRows);
  }

  // Handle New Bids HLA using same format as Seen HLA
  newBidsSheet.clearContents();
  newBidsSheet.getRange(1, 1, 1, 3).setValues([["Project_Name", "Date", "Time"]]);

  if (newRows.length > 0) {
    const newBidsFormattedRows = newRows.map(row => {
      const url = row[urlIndex];
      const name = row[nameIndex];
      const bidInfo = row[bidInfoIndex];
      const [date, time] = bidInfo.split(" - ").map(s => s.trim());
      const hyperlinkFormula = `=HYPERLINK("${url}", "${name}")`;
      return [hyperlinkFormula, date, time];
    });

    newBidsSheet.getRange(2, 1, newBidsFormattedRows.length, 3).setValues(newBidsFormattedRows);
  }

  // âœ… EMAIL SECTION: updated to match New Bids HLA format
  const introLine = `<p>There are <strong>${newRows.length}</strong> new bids listed on HLA as of <strong>${new Date().toLocaleDateString()}</strong>.</p>`;

  const emailBody = newRows.length > 0
    ? newRows.map(row => {
        const url = row[urlIndex];
        const name = row[nameIndex];
        const bidInfo = row[bidInfoIndex];
        const [date, time] = bidInfo.split(" - ").map(s => s.trim());
        const hyperlink = `<a href="${url}">${name}</a>`;
        return `<p><strong>Project:</strong> ${hyperlink}<br><strong>Date:</strong> ${date}<br><strong>Time:</strong> ${time}</p>`;
      }).join('<hr>')
    : '';

  const htmlBody = `
    <h3>New Bids from HLA</h3>
    ${introLine}
    ${emailBody}
  `;

  GmailApp.sendEmail(
    "samk@ttcexcavation.com",
    "New Bids from HLA",
    "",
    {
      htmlBody: htmlBody,
      name: Session.getActiveUser().getEmail()
    }
  );

  dailySheet.clearContents();
}
